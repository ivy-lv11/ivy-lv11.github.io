---
layout: post
title:  Leetcode-DP
date:   2020-08-24 15:01:35 +0300
image:  07.jpg
tags:   Home
---
## 用来记录leetcode上面一些关于DP的题目
#### 1. 不同的二叉搜索树
*给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种*
解题思路：根据递推式如下
$$
f(n) = \sum_{i=1}^{n} f(k-1)f(n-k)
$$
```
class Solution {
public:
    int numTrees(int n) {
        int* data = new int[n+1];
        data[0] = 1;
        data[1] = 1;
        for(int i=2;i<n+1;i++)
        {
            int s = 0;
            for(int j=1;j<=i;j++)
            {
                s += data[j-1]*data[i-j];
            }
            data[i] = s;
        }
        return data[n];

    }
};
```
#### 2. 移除盒子
*给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 k 个盒子（k >= 1），这样一轮之后你将得到 k^2 个积分。当你将所有盒子都去掉之后，求你能获得的最大积分和*
解题思路：动态规划的方法
```
class Solution {
private:
    int dp[100][100][100];
public:
    int removeBoxes(vector<int>& boxes) {
        memset(dp,0,sizeof(dp));
        return func(boxes,0,boxes.size()-1,0);
    }
    
    int func(vector<int>& boxes,int l,int r,int k)
    {
        if(l>r)
            return 0;
        if(dp[l][r][k]!=0)
            return dp[l][r][k];
        else
        {
            dp[l][r][k] = (k+1)*(k+1) + func(boxes,l,r-1,0);
            for(int i=l;i<r;i++)
            {
                if(boxes[i]==boxes[r])
                    dp[l][r][k] = max(dp[l][r][k],func(boxes,i+1,r-1,0)+func(boxes,l,i,k+1));
            }
            return dp[l][r][k];
        }
        
        
    }
};

```
